Description: CD12352 - Infrastructure as Code Project - Web Tier

Parameters: 
  ApplicationName:
    Description: Name of Application
    Type: String
    Default: Udagram-Simple-Application

  S3BucketName:
    Description: Name of S3 Bucket
    Type: String
    Default: udacity-udagram-chungvv3-rondamword
  
  AMIImageId:
    Description: AWS ImageId of OS
    Type: String
    Default: ami-0557a15b87f6559cf

Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Access HTTP to LoadBalancer From Outside
      VpcId: 
        Fn::ImportValue:
          !Sub "${ApplicationName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: name
          Value: !Sub "${ApplicationName}-LB-SG"

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Load Balancer Access HTTP
      VpcId: 
        Fn::ImportValue:
          !Sub "${ApplicationName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: name
          Value: !Sub "${ApplicationName}-EC2-SG"

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - "GET"
            AllowedOrigins:
              - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags: 
        - Key: name
          Value: !Sub "${ApplicationName}-S3-Bucket"

  WebAppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2AccessS3Role
      Description: Role allow EC2 execute actions on S3 bucket
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies: 
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 's3:PutObject*'
              - 's3:GetObject*'
              - 's3:DeleteObject*'
              Resource: !Sub "${S3Bucket.Arn}/*"
      Tags: 
        - Key: name
          Value: !Sub "${ApplicationName}-WEB-ROLE"

  WebEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebAppInstanceRole

  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: WebAppLaunchTemplate-Udacity
      LaunchTemplateData:
        ImageId: !Ref AMIImageId # amazon/ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-20230208
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '50'
        IamInstanceProfile:
          Name: !Ref WebEC2InstanceProfile
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt-get update -y
            sudo apt-get install nginx -y
            systemctl start nginx
            systemctl enable nginx
            echo "<h3> It works! Udagram, Udacity! </h3>" | tee /var/www/html/index.html
            chmod 644 /var/www/html/index.html

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/"
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 3
      Tags: 
        - Key: name
          Value: WebAppTargetGroup
      UnhealthyThresholdCount: 5
      Protocol: HTTP
      Port: 80
      VpcId:
        Fn::ImportValue: !Sub "${ApplicationName}-VPCID"

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
      - Fn::ImportValue: 
          !Sub "${ApplicationName}-PrivateSubnets"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MaxSize: '2'
      MinSize: '1'
      DesiredCapacity: '1'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
      Tags:
        - Key: name
          Value: !Sub "${ApplicationName}-ASG"
          PropagateAtLaunch: true

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: 
        - Ref: LoadBalancerSecurityGroup
      Subnets: 
        Fn::Split: [",", Fn::ImportValue: !Sub "${ApplicationName}-PublicSubnets"]
      Tags: 
        - Key: name
          Value: LoadBalancer

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

Outputs:
  LoadBalancerURL:
    Description: URL Of LoadBalancer
    Value: !Sub "http://${LoadBalancer.DNSName}"
    Export: 
      Name: !Sub "${ApplicationName}-Udagram-URL"
